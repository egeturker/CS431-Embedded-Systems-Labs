C51 COMPILER V9.60.0.0   HW3_INTERRUPTS                                                    11/11/2021 16:16:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HW3_INTERRUPTS
OBJECT MODULE PLACED IN .\Objects\hw3_interrupts.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE hw3_interrupts.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\hw3_interrupts.lst) TABS(2) OBJECT(.\Objects\hw3_interrupts.obj)

line level    source

   1          #include "reg51.h"
   2          #include "inttypes.h"
   3          #include <stdio.h>
   4          
   5          #define BUFFER_SIZE 10
   6          #define ENTER 0x10
   7          
   8          struct buffer{
   9            uint8_t buff[BUFFER_SIZE];
  10            uint8_t current_size ;
  11            uint8_t current_index ;
  12            
  13          }b;
  14          
  15          sbit dac_wr = P0^7;
  16          sbit serial_interrupt = IE^4;
  17          sbit interrupts = IE^7;
  18          
  19          uint8_t numbers[10]  = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39};
  20          uint8_t out_flag = 0;
  21          void dot(){
  22   1        int i;
  23   1        dac_wr = 0;
  24   1        P1 = 0x34;
  25   1        for(i = 0; i <20; i++){}
  26   1        P1 = 0x00;
  27   1        dac_wr = 1;
  28   1      }
  29          
  30          void dash(){
  31   1        int i;
  32   1        dac_wr = 0;
  33   1        P1 = 0x9a;
  34   1        for(i = 0; i <20; i++){}
  35   1        P1 = 0x00;
  36   1        dac_wr = 1;
  37   1      }
  38          
  39          void decode_morse(uint8_t number){
  40   1        switch(number){
  41   2          case 0x31:
  42   2            dot();      if(out_flag == 0) return;
  43   2            dash();     if(out_flag == 0) return;
  44   2            dash();     if(out_flag == 0) return;
  45   2            dash();     if(out_flag == 0) return;
  46   2            dash();     if(out_flag == 0) return;
  47   2            break;
  48   2          case 0x32:
  49   2            dot();      if(out_flag == 0) return;
  50   2            dot();      if(out_flag == 0) return;
  51   2            dash();     if(out_flag == 0) return;
  52   2            dash();     if(out_flag == 0) return;
  53   2            dash();     if(out_flag == 0) return;
  54   2            break;
C51 COMPILER V9.60.0.0   HW3_INTERRUPTS                                                    11/11/2021 16:16:59 PAGE 2   

  55   2          case 0x33:
  56   2            dot();      if(out_flag == 0) return;
  57   2            dot();      if(out_flag == 0) return;
  58   2            dot();      if(out_flag == 0) return;
  59   2            dash();     if(out_flag == 0) return;
  60   2            dash();     if(out_flag == 0) return;
  61   2            break;
  62   2          case 0x34:
  63   2            dot();      if(out_flag == 0) return;
  64   2            dot();      if(out_flag == 0) return;
  65   2            dot();      if(out_flag == 0) return;
  66   2            dot();      if(out_flag == 0) return;
  67   2            dash();     if(out_flag == 0) return;
  68   2            break;
  69   2          case 0x35:
  70   2            dot();      if(out_flag == 0) return;
  71   2            dot();      if(out_flag == 0) return;
  72   2            dot();      if(out_flag == 0) return;
  73   2            dot();      if(out_flag == 0) return;
  74   2            dot();      if(out_flag == 0) return;
  75   2            break;
  76   2          case 0x36:
  77   2            dash();     if(out_flag == 0) return;
  78   2            dot();      if(out_flag == 0) return;
  79   2            dot();      if(out_flag == 0) return;
  80   2            dot();      if(out_flag == 0) return;
  81   2            dot();      if(out_flag == 0) return;
  82   2            break;
  83   2          case 0x37:
  84   2            dash();     if(out_flag == 0) return;
  85   2            dash();     if(out_flag == 0) return;
  86   2            dot();      if(out_flag == 0) return;
  87   2            dot();      if(out_flag == 0) return;
  88   2            dot();      if(out_flag == 0) return;
  89   2            break;
  90   2          case 0x38:
  91   2            dash();     if(out_flag == 0) return;
  92   2            dash();     if(out_flag == 0) return;
  93   2            dash();     if(out_flag == 0) return;
  94   2            dot();      if(out_flag == 0) return;
  95   2            dot();      if(out_flag == 0) return;
  96   2            break;
  97   2          case 0x39:
  98   2            dash();     if(out_flag == 0) return;
  99   2            dash();     if(out_flag == 0) return;
 100   2            dash();     if(out_flag == 0) return;
 101   2            dash();     if(out_flag == 0) return;
 102   2            dot();      if(out_flag == 0) return;
 103   2            break;
 104   2          case 0x30:
 105   2            dash();     if(out_flag == 0) return;
 106   2            dash();     if(out_flag == 0) return; 
 107   2            dash();     if(out_flag == 0) return;
 108   2            dash();     if(out_flag == 0) return;
 109   2            dash();     if(out_flag == 0) return;
 110   2            break;    
 111   2        }
 112   1      }
 113          
 114          void uart_in(struct buffer* b){
 115   1        uint8_t i;
 116   1          
C51 COMPILER V9.60.0.0   HW3_INTERRUPTS                                                    11/11/2021 16:16:59 PAGE 3   

 117   1          if(RI == 1){
 118   2            if(ENTER == SBUF){
 119   3              out_flag = 1;
 120   3              RI = 0; 
 121   3              TI = 0;
 122   3              return;
 123   3            }
 124   2            for(i = 0; i < 10; i++){
 125   3              if(numbers[i] == SBUF){
 126   4                b->buff[b->current_size] = SBUF;
 127   4                RI = 0;
 128   4                TI = 0;
 129   4                b->current_size++;
 130   4                break;
 131   4              }
 132   3            }
 133   2          }
 134   1      }
 135          
 136          void uart_out(struct buffer* b){
 137   1          if(out_flag == 1){
 138   2              putchar(b->buff[b->current_index]);
 139   2              b->current_index++;
 140   2            if(b->current_index == b->current_size){
 141   3                out_flag = 0;
 142   3                b->current_size = 0;
 143   3                b->current_index = 0;
 144   3            }
 145   2          }
 146   1      }
 147          
 148          void uart_echo(){
 149   1          uint8_t uart_input;
 150   1          if(RI == 1){
 151   2            uart_input = SBUF;
 152   2            RI = 0;
 153   2            SBUF = uart_input;
 154   2            TI = 0;
 155   2          }
 156   1      }
 157          
 158          void flash_next(struct buffer* b){
 159   1          if(out_flag == 1){
 160   2            decode_morse(b->buff[b->current_index]);
 161   2            if(b->current_index == b->current_size){
 162   3                out_flag = 0;
 163   3                b->current_size = 0;
 164   3                b->current_index = 0;
 165   3            }
 166   2          }
 167   1          if(out_flag == 1){
 168   2              b->current_index++;
 169   2          }
 170   1      }
 171          
 172          
 173          void uart_isr(void) interrupt 4 {
 174   1        if(out_flag == 1){
 175   2          out_flag = 0;
 176   2          b.current_size = 0;
 177   2          b.current_index = 0;
 178   2        }
C51 COMPILER V9.60.0.0   HW3_INTERRUPTS                                                    11/11/2021 16:16:59 PAGE 4   

 179   1        uart_in(&b);
 180   1      
 181   1      }
 182          
 183          
 184          
 185          void main (void)
 186          {
 187   1        b.current_size = 0;
 188   1        b.current_index = 0;
 189   1        
 190   1        SCON  = 0x50;                   // UART mode 1  
 191   1        TMOD |= 0x20;                   // timer 1 mode 2     
 192   1        TH1   = 0xfd;                   // 19200 baud  22.118 mhz clock      
 193   1        TR1   = 1;                      // timer 1 run                        
 194   1        TI    = 1;                      // UART receive first character 
 195   1        
 196   1        interrupts = 1;
 197   1        serial_interrupt = 1;
 198   1        
 199   1      //Demo to be made in update freq = 20
 200   1      while(1)
 201   1        {
 202   2          //uart_in(&b);  
 203   2          flash_next(&b);   
 204   2          //uart_out(&b);
 205   2          //uart_echo();
 206   2          //decode_morse(0x31);
 207   2        }
 208   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    847    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
